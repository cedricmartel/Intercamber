<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this); 

string inputFile = @"../../IntercamberBusiness/IntercamberModel.edmx"; 
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Émettre des types d'entité
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{ 
    fileManager.StartNewFile(entity.Name + ".xml");

#><?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Intercamber.Dao.<#=code.Escape(entity)#>" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="<#=code.Escape(entity)#>" type="CML.Intercamber.Business.Model.<#=code.Escape(entity)#>"/>
    </alias>

	<resultMaps>
        <resultMap id="<#=code.Escape(entity)#>Result" class="<#=code.Escape(entity)#>">
<#
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		string classAttributeName = code.Escape(edmProperty).Replace("_", "");
		#>
			<result property="<#=classAttributeName#>" column="<#=code.Escape(edmProperty)#>" />
<#
    }
#>
        </resultMap>
    </resultMaps>

	<statements>

        <select id="CML.Intercamber.<#=code.Escape(entity)#>.Search<#=code.Escape(entity)#>s" resultMap="<#=code.Escape(entity)#>Result" parameterClass="System.Collections.IDictionary">
            SELECT *
            FROM <#=code.Escape(entity)#>
			WHERE 
				TODO 
        </select>

        <update id="CML.Intercamber.<#=code.Escape(entity)#>.Update<#=code.Escape(entity)#>" parameterClass="<#=code.Escape(entity)#>" >
            UPDATE <#=code.Escape(entity)#>
            SET <#
					int numProp = 0;
					foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
					{
						numProp ++;
						string classAttributeName = code.Escape(edmProperty).Replace("_", "");
						string dbName = code.Escape(edmProperty);
						string separator = (numProp > 1 ? ", ": "");
						#><#=separator#><#=dbName#> = #<#=classAttributeName#>#<#
					}#>

            WHERE 
				TODO
        </update>

        <insert id="CML.Intercamber.<#=code.Escape(entity)#>.Insert<#=code.Escape(entity)#>" parameterClass="<#=code.Escape(entity)#>">
			INSERT INTO <#=code.Escape(entity)#> (<#
					numProp = 0;
					foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
					{
						numProp ++;
						string dbName = code.Escape(edmProperty);
						string separator = (numProp > 1 ? ", ": "");
						#><#=separator#><#=dbName#><#
					}#>)
			VALUES ( <#
					numProp = 0;
					foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
					{
						numProp ++;
						string classAttributeName = code.Escape(edmProperty).Replace("_", "");
						string separator = (numProp > 1 ? ", ": "");
						#><#=separator#>#<#=classAttributeName#>#<#
					}#> )
        </insert>

        <delete id="CML.Intercamber.<#=code.Escape(entity)#>.Delete<#=code.Escape(entity)#>" parameterClass="string">
            DELETE FROM Agent 
			WHERE 
				TODO 
        </delete>

    </statements>

</sqlMap>
<#

}
fileManager.Process(); 
 
#>
