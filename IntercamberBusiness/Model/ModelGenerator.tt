<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"../IntercamberModel.edmx"; 
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Émettre des types d'entité
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{ 
    fileManager.StartNewFile(entity.Name + ".cs");
    BeginNamespace(namespaceName, code); 

#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>
{
	/* CODE GENERE, NE PAS MODIFIER */
	/* pour enrichir cette classe, merci de faire une classe partielle (il faut créer <#=code.Escape(entity)#>Extension.cs) */
<#
    #>
	/* Champs de la table */ 
<#
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		string varName = code.Escape(edmProperty).Replace("_", "");
#>
	public <#=code.Escape(edmProperty.TypeUsage)#> <#=varName#> { get; set; }
<#
    }
    #>

    /* Propriétés de navigation */
<#
    foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
    {
#>
	public ArrayList <#=code.Escape(navProperty)#> { get; set; }
	<#
    } 
#>
}
<#
    EndNamespace(namespaceName);
}
fileManager.Process(); 
 
#>
<#+

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
using System;
using System.Collections;
using System.Linq;
using System.Text;

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
} 

void EndNamespace(string namespaceName) 
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

#>
